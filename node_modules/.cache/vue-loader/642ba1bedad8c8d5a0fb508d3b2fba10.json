{"remainingRequest":"/home/fkubota/Git/kagglelike-leaderboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fkubota/Git/kagglelike-leaderboard/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fkubota/Git/kagglelike-leaderboard/src/App.vue","mtime":1586347532739},{"path":"/home/fkubota/Git/kagglelike-leaderboard/node_modules/cache-loader/dist/cjs.js","mtime":1586347530335},{"path":"/home/fkubota/Git/kagglelike-leaderboard/node_modules/babel-loader/lib/index.js","mtime":1586347530343},{"path":"/home/fkubota/Git/kagglelike-leaderboard/node_modules/vuetify-loader/lib/loader.js","mtime":1586347529887},{"path":"/home/fkubota/Git/kagglelike-leaderboard/node_modules/cache-loader/dist/cjs.js","mtime":1586347530335},{"path":"/home/fkubota/Git/kagglelike-leaderboard/node_modules/vue-loader/lib/index.js","mtime":1586347530203}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKICBleHBvcnQgZGVmYXVsdCB7CiAgICBkYXRhICgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBzY29yZTogJy4uLicsCiAgICAgICAgaGVsbG86ICcnLAogICAgICAgIHN1YkRhdGE6ICcnLAogICAgICAgIHJhbmtpbmdUYWJsZTogJycsCiAgICAgICAgc29ydEJ5OiAncmFuaycsCiAgICAgICAgc29ydERlc2M6IGZhbHNlLAogICAgICAgIHNlbGVjdGlvbl9uYW1lOiAnJywKICAgICAgICBuYW1lczogWydBJywgJ0InLCAnQyddLAogICAgICAgIGRyb3Bkb3duX2ZvbnQ6IFsnQXJpYWwnLCAnQ2FsaWJyaScsICdDb3VyaWVyJywgJ1ZlcmRhbmEnXSwKICAgICAgICBoZWFkZXJzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIHRleHQ6ICcjJywKICAgICAgICAgICAgYWxpZ246ICdjZW50ZXInLAogICAgICAgICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlOiAncmFuaycsCiAgICAgICAgICB9LAogICAgICAgICAgeyB0ZXh0OiAnTmFtZScsIHZhbHVlOiAnbmFtZSd9LAogICAgICAgICAgeyB0ZXh0OiAnU2NvcmUnLCB2YWx1ZTogJ3Njb3JlJ30sCiAgICAgICAgICB7IHRleHQ6ICdOX1N1Ym1pc3Npb24nLCB2YWx1ZTogJ25fc3VibWlzc2lvbicgfSwKICAgICAgICBdLAogICAgICAgIHBhcnRpY2lwYW50czogWwogICAgICAgICAgewogICAgICAgICAgICByYW5rOiAxLAogICAgICAgICAgICBuYW1lOiAnQScsCiAgICAgICAgICAgIHNjb3JlOiAxNTksCiAgICAgICAgICAgIG5fc3VibWlzc2lvbjogNi4wLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgcmFuazogMiwKICAgICAgICAgICAgbmFtZTogJ0InLAogICAgICAgICAgICBzY29yZTogMjM3LAogICAgICAgICAgICBuX3N1Ym1pc3Npb246IDkuMCwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIHJhbms6IDMsCiAgICAgICAgICAgIG5hbWU6ICdDJywKICAgICAgICAgICAgc2NvcmU6IDI2MiwKICAgICAgICAgICAgbl9zdWJtaXNzaW9uOiAxNi4wLAogICAgICAgICAgfSwKICAgICAgICBdLAogICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICByZWFkRmlsZUFzeW5jIChmaWxlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCkKICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7CiAgICAgICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdCkKICAgICAgICAgIH0KICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0CiAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKQogICAgICAgIH0pCiAgICAgIH0sCiAgICAgIGFzeW5jIGZpbGVTZWxlY3QoZmlsZSl7CiAgICAgICAgY29uc29sZS5sb2coJ2Z1bmMt4oaTZmlsZVNlbGVjdCcpCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnN0IGNzdiA9IGF3YWl0IHRoaXMucmVhZEZpbGVBc3luYyhmaWxlKQogICAgICAgICAgdGhpcy5zdWJEYXRhID0gY3N2CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5sb2coZSkKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFzeW5jIGdldFNjb3JlKCl7CiAgICAgICAgY29uc29sZS5sb2coJ2Z1bmMt4oaTZ2V0U2NvcmUnKQogICAgICAgIC8vIFBPU1QKICAgICAgICBhd2FpdCBheGlvcy5wb3N0KCdodHRwOi8vMTI3LjAuMC4xOjUwMDMvZ2V0X3Njb3JlJywgewogICAgICAgICAgYXJnX3N1YkRhdGE6IHRoaXMuc3ViRGF0YSwKICAgICAgICAgIGFyZ19zZWxlY3Rpb25fbmFtZTogdGhpcy5zZWxlY3Rpb25fbmFtZSwKICAgICAgICB9KQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgdGhpcy5zY29yZSA9IHJlc3BvbnNlLmRhdGEuc2NvcmUKICAgICAgICAgIHRoaXMuZ2V0UmFua2luZ1RhYmxlKCkKICAgICAgICB9KQogICAgICB9LAogICAgICBhc3luYyBnZXRSYW5raW5nVGFibGUoKXsKICAgICAgICBjb25zb2xlLmxvZygnZnVuYy3ihpNnZXRSYW5raW5nVGFibGUnKQogICAgICAgIC8vIFBPU1QKICAgICAgICBhd2FpdCBheGlvcy5wb3N0KCdodHRwOi8vMTI3LjAuMC4xOjUwMDMvZ2V0X3JhbmtpbmdfdGFibGUnLCB7CiAgICAgICAgfSkKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIHRoaXMucmFua2luZ1RhYmxlID0gcmVzcG9uc2UuZGF0YS5yYW5raW5nX3RhYmxlCiAgICAgICAgfSkKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnJhbmtpbmdUYWJsZSkKICAgICAgICB0aGlzLnVwZGF0ZVJhbmtpbmdUYWJsZSgpCiAgICAgIH0sCiAgICAgIHVwZGF0ZVJhbmtpbmdUYWJsZSgpIHsKICAgICAgICBjb25zb2xlLmxvZygnZnVuYy3ihpN1cGRhdGVSYW5raW5nVGFibGUnKQogICAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IFtdOwogICAgICAgIGNvbnN0IGxpbmVzID0gdGhpcy5yYW5raW5nVGFibGUuc3BsaXQoIlxuIik7CiAgICAgICAgbGluZXMuZm9yRWFjaChlbGVtZW50ID0+IHsKICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGEgPSBlbGVtZW50LnNwbGl0KCIsIik7CiAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHsKICAgICAgICAgICAgcmFuazogcGFydGljaXBhbnRzRGF0YVswXSwKICAgICAgICAgICAgbmFtZTogcGFydGljaXBhbnRzRGF0YVsxXSwKICAgICAgICAgICAgc2NvcmU6IHBhcnRpY2lwYW50c0RhdGFbMl0sCiAgICAgICAgICAgIG5fc3VibWlzc2lvbjogcGFydGljaXBhbnRzRGF0YVszXQogICAgICAgICAgfTsKICAgICAgICAgIHBhcnRpY2lwYW50cy5wdXNoKHBhcnRpY2lwYW50KTsKICAgICAgICB0aGlzLnBhcnRpY2lwYW50cyA9IHBhcnRpY2lwYW50cwogICAgICAgIH0pOwogICAgICB9LAogICAgfSwKICAgIC8vIG1vdW50ZWQgKCkgewogICAgY3JlYXRlZCAoKSB7CiAgICAgIGNvbnNvbGUubG9nKCdmdW5jLeKGk21vdW50ZWQnKQogICAgICBjb25zb2xlLmxvZyh0aGlzLnBhcnRpY2lwYW50cykKICAgICAgdGhpcy5nZXRSYW5raW5nVGFibGUoKQogICAgfQogIH0K"},{"version":3,"sources":["App.vue"],"names":[],"mappingsfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app>\n    <v-app-bar color=\"primary\" dark app class='title'>\n      <v-toolbar-title>Data Science Competition #1</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-btn x-large icon dark @click='getRankingTable'>\n        <v-icon dark>mdi-cached</v-icon>\n      </v-btn>\n    </v-app-bar>\n    <v-content>\n      <v-container>\n        <v-row>\n          <v-col>\n            <v-select v-model=\"selection_name\" :items='names' label='select your name'> </v-select>\n          </v-col>\n          <v-col>\n            <v-file-input @change='fileSelect' show-size label='selec your submission file' accept='.csv' ></v-file-input>\n          </v-col>\n        </v-row>\n        <v-row justify='end'>\n            <v-btn x-large color='primary' @click='getScore' outlined target='#de'>submit</v-btn>\n        </v-row>\n        <v-list-item-title class=\"title grey--text text--darken-2\" align='center' style='margin-top: 30px'>\n          your submission score is <h2><font color='blue'>{{score}}</font></h2>\n        </v-list-item-title>\n        <v-divider></v-divider>\n        <v-list-item-title class=\"title grey--text text--darken-2\" align='center' style='margin-top: 30px'>\n          Leaderboard\n        </v-list-item-title>\n        <v-data-table\n          :headers=\"headers\" \n          :items=\"participants\" \n          :items-per-page=\"10\" \n          class=\"elevation-1 category-table\"\n          style=\"margin-left: 100px; margin-right: 100px;\" >\n          <template slot=\"items\" slot-scope=\"props\">\n            <td class=\"text-xs-right\">{{ props.item.code }}</td>\n            <td class=\"text-xs-right\">{{ props.item.name }}</td>\n            <td class=\"text-xs-right\">{{ props.item.workerType }}</td>\n          </template>\n        </v-data-table>\n      </v-container>\n    </v-content>\n  </v-app>\n</template>\n<script>\nimport axios from 'axios'\n  export default {\n    data () {\n      return {\n        score: '...',\n        hello: '',\n        subData: '',\n        rankingTable: '',\n        sortBy: 'rank',\n        sortDesc: false,\n        selection_name: '',\n        names: ['A', 'B', 'C'],\n        dropdown_font: ['Arial', 'Calibri', 'Courier', 'Verdana'],\n        headers: [\n          {\n            text: '#',\n            align: 'center',\n            sortable: false,\n            value: 'rank',\n          },\n          { text: 'Name', value: 'name'},\n          { text: 'Score', value: 'score'},\n          { text: 'N_Submission', value: 'n_submission' },\n        ],\n        participants: [\n          {\n            rank: 1,\n            name: 'A',\n            score: 159,\n            n_submission: 6.0,\n          },\n          {\n            rank: 2,\n            name: 'B',\n            score: 237,\n            n_submission: 9.0,\n          },\n          {\n            rank: 3,\n            name: 'C',\n            score: 262,\n            n_submission: 16.0,\n          },\n        ],\n      }\n    },\n    methods: {\n      readFileAsync (file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader()\n          reader.onload = () => {\n            resolve(reader.result)\n          }\n          reader.onerror = reject\n          reader.readAsText(file)\n        })\n      },\n      async fileSelect(file){\n        console.log('func-↓fileSelect')\n        try {\n          const csv = await this.readFileAsync(file)\n          this.subData = csv\n        } catch (e) {\n          console.log(e)\n        }\n      },\n      async getScore(){\n        console.log('func-↓getScore')\n        // POST\n        await axios.post('http://127.0.0.1:5003/get_score', {\n          arg_subData: this.subData,\n          arg_selection_name: this.selection_name,\n        })\n        .then((response) => {\n          this.score = response.data.score\n          this.getRankingTable()\n        })\n      },\n      async getRankingTable(){\n        console.log('func-↓getRankingTable')\n        // POST\n        await axios.post('http://127.0.0.1:5003/get_ranking_table', {\n        })\n        .then((response) => {\n          this.rankingTable = response.data.ranking_table\n        })\n        console.log(this.rankingTable)\n        this.updateRankingTable()\n      },\n      updateRankingTable() {\n        console.log('func-↓updateRankingTable')\n        const participants = [];\n        const lines = this.rankingTable.split(\"\\n\");\n        lines.forEach(element => {\n          const participantsData = element.split(\",\");\n          const participant = {\n            rank: participantsData[0],\n            name: participantsData[1],\n            score: participantsData[2],\n            n_submission: participantsData[3]\n          };\n          participants.push(participant);\n        this.participants = participants\n        });\n      },\n    },\n    // mounted () {\n    created () {\n      console.log('func-↓mounted')\n      console.log(this.participants)\n      this.getRankingTable()\n    }\n  }\n</script>"]}]}